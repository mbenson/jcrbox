/*
 *  Copyright the original author or authors.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
//
// generated by mbenson.snapin.SnapinProcessor, then modified
//

package jcrbox.query;

import java.lang.reflect.TypeVariable;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;
import java.util.function.IntFunction;
import java.util.function.Supplier;

import javax.jcr.RepositoryException;
import javax.jcr.Value;
import javax.jcr.ValueFactory;
import javax.jcr.query.InvalidQueryException;
import javax.jcr.query.Query;
import javax.jcr.query.qom.And;
import javax.jcr.query.qom.BindVariableValue;
import javax.jcr.query.qom.ChildNode;
import javax.jcr.query.qom.ChildNodeJoinCondition;
import javax.jcr.query.qom.Column;
import javax.jcr.query.qom.Comparison;
import javax.jcr.query.qom.Constraint;
import javax.jcr.query.qom.DescendantNode;
import javax.jcr.query.qom.DescendantNodeJoinCondition;
import javax.jcr.query.qom.DynamicOperand;
import javax.jcr.query.qom.EquiJoinCondition;
import javax.jcr.query.qom.FullTextSearch;
import javax.jcr.query.qom.FullTextSearchScore;
import javax.jcr.query.qom.Join;
import javax.jcr.query.qom.JoinCondition;
import javax.jcr.query.qom.Length;
import javax.jcr.query.qom.Literal;
import javax.jcr.query.qom.LowerCase;
import javax.jcr.query.qom.NodeLocalName;
import javax.jcr.query.qom.NodeName;
import javax.jcr.query.qom.Not;
import javax.jcr.query.qom.Or;
import javax.jcr.query.qom.Ordering;
import javax.jcr.query.qom.PropertyExistence;
import javax.jcr.query.qom.PropertyValue;
import javax.jcr.query.qom.QueryObjectModel;
import javax.jcr.query.qom.QueryObjectModelFactory;
import javax.jcr.query.qom.SameNode;
import javax.jcr.query.qom.SameNodeJoinCondition;
import javax.jcr.query.qom.Selector;
import javax.jcr.query.qom.Source;
import javax.jcr.query.qom.StaticOperand;
import javax.jcr.query.qom.UpperCase;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.Validate;
import org.apache.commons.lang3.reflect.TypeUtils;

import jcrbox.Jcr;
import jcrbox.JcrNode;
import jcrbox.QualifedProperty;
import jcrbox.fp.JcrFunction;
import jcrbox.fp.JcrSupplier;
import jcrbox.util.Lazy;

/**
 * (Potentially anonymous) subclasses can implement {@link #buildQuery()} with full, direct, <em>local</em> (i.e.
 * unqualified) access to the {@link QueryObjectModelFactory} API.
 */
public abstract class QueryBuilder implements QueryObjectModelFactory {

    /**
     * {@link QueryBuilder} with an association to a {@link JcrQuery} type for automatic registration.
     *
     * @param <Q>
     */
    public static abstract class Strong<Q extends JcrQuery> extends QueryBuilder {

        private static final TypeVariable<?> QUERY_TYPE = Strong.class.getTypeParameters()[0];

        /**
         * The query type-modeling class, read from the type parameter of a subclass.
         */
        public final Class<Q> queryType;

        /**
         * Create a new {@link QueryBuilder.Strong} instance.
         */
        @SuppressWarnings("unchecked")
        protected Strong() {
            super();
            this.queryType =
                Validate.notNull((Class<Q>) TypeUtils.getTypeArguments(getClass(), Strong.class).get(QUERY_TYPE),
                    "%s does not bind %s to a concrete type", getClass(), QUERY_TYPE);
        }
    }

    /**
     * Fluent query builder interface.
     */
    public class CreateQuery implements JcrSupplier<QueryObjectModel> {

        private final Source source;
        private Constraint constraint;
        private final Lazy<Set<Ordering>> orderings = new Lazy<>(LinkedHashSet::new);
        private final Lazy<Set<Column>> columns = new Lazy<>(LinkedHashSet::new);

        private CreateQuery(Source source) {
            super();
            this.source = Objects.requireNonNull(source);
        }

        /**
         * Specify the query's constraint.
         *
         * @param constraint
         * @return {@code this}, fluently
         */
        public CreateQuery constraint(Constraint constraint) {
            Objects.requireNonNull(constraint);
            synchronized (this) {
                if (this.constraint == null) {
                    this.constraint = constraint;
                } else {
                    try {
                        this.constraint = and(this.constraint, constraint);
                    } catch (RepositoryException e) {
                        throw new RuntimeException("Exception encountered attempting to AND JCR query constraints", e);
                    }
                }
            }
            this.constraint = constraint;
            return this;
        }

        /**
         * Specify the query's constraint.
         *
         * @param constraint
         * @return {@code this}, fluently
         */
        public CreateQuery constraint(JcrSupplier<Constraint> constraint) {
            return constraint(constraint.get());
        }

        /**
         * Specify the query's orderings.
         *
         * @param orderings
         * @return {@code this}, fluently
         */
        public CreateQuery orderings(Ordering... orderings) {
            return addTo(this.orderings, orderings);
        }

        /**
         * Specify the query's orderings.
         *
         * @param orderings
         * @return {@code this}, fluently
         */
        public CreateQuery orderings(JcrSupplier<Ordering[]> orderings) {
            return orderings(orderings.get());
        }

        /**
         * Specify the query's columns.
         *
         * @param columns
         * @return {@code this}, fluently
         */
        public CreateQuery columns(Column... columns) {
            return addTo(this.columns, columns);
        }

        /**
         * Specify the query's columns.
         *
         * @param columns
         * @return {@code this}, fluently
         */
        public CreateQuery columns(JcrSupplier<Column[]> columns) {
            return columns(columns.get());
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public QueryObjectModel jcrGet() throws RepositoryException {
            return createQuery(source, constraint, array(orderings, Ordering[]::new), array(columns, Column[]::new));
        }

        private <T> CreateQuery addTo(Lazy<? extends Collection<? super T>> coll, T[] items) {
            if (ArrayUtils.isNotEmpty(items)) {
                Collections.addAll(coll.get(), items);
            }
            return this;
        }

        private <T> T[] array(Lazy<? extends Collection<? super T>> coll, IntFunction<T[]> generator) {
            return coll.optional().map(c -> c.stream().toArray(generator)).orElse(null);
        }
    }

    /**
     * The associated {@link Jcr} instance.
     */
    protected Jcr jcr;

    private volatile QueryObjectModelFactory delegate;

    /**
     * Template method for a {@link QueryBuilder} subclass. The default implementation calls {@link #supplyQuery()}
     *
     * @return {@link Query}
     * @throws RepositoryException
     * @throws InvalidQueryException
     */
    protected Query buildQuery() throws RepositoryException {
        return supplyQuery().get();
    }

    /**
     * Template method for a {@link QueryBuilder} subclass that wants to use {@link CreateQuery}.
     *
     * @return {@link Supplier} of {@link Query}
     * @throws RepositoryException
     */
    protected Supplier<? extends Query> supplyQuery() throws RepositoryException {
        throw new UnsupportedOperationException();
    }

    /**
     * Call {@link #buildQuery()} using {@code delegate}
     *
     * @param delegate
     *            {@link QueryObjectModelFactory} delegate
     * @param jcr
     *            invoker
     * @return {@link Query}
     * @throws RepositoryException
     * @throws InvalidQueryException
     */
    public final synchronized Query buildQuery(QueryObjectModelFactory delegate, Jcr jcr)
        throws RepositoryException {
        Validate.validState(this.delegate == null, "Re-entry not permitted");
        Validate.notNull(delegate, "delegate");
        Validate.notNull(jcr, "jcr");

        synchronized (this) {
            this.jcr = jcr;
            this.delegate = delegate;
            try {
                return buildQuery();
            } finally {
                this.jcr = null;
                this.delegate = null;
            }
        }
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @param arg2
     *            see interface
     * @param arg3
     *            see interface
     * @return {@link javax.jcr.query.qom.QueryObjectModel}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#createQuery(Source, Constraint, Ordering[], Column[])
     */
    @Override
    public final synchronized QueryObjectModel createQuery(Source arg0, Constraint arg1, Ordering[] arg2, Column[] arg3)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.createQuery(arg0, arg1, arg2, arg3);
    }

    /**
     * Return a fluent builder to create a query.
     *
     * @param source
     * @return {@link CreateQuery}
     */
    protected final CreateQuery createQuery(Source source) {
        return new CreateQuery(source);
    }

    /**
     * Return a fluent builder to create a query.
     *
     * @param source
     * @return {@link CreateQuery}
     */
    protected final CreateQuery createQuery(JcrSupplier<Source> source) {
        return createQuery(source.get());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link Selector}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#selector(String, String)
     */
    @Override
    public final synchronized Selector selector(String arg0, String arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.selector(arg0, arg1);
    }

    /**
     * Create a selector for a {@link JcrNode}.
     *
     * @param node
     * @return {@link Selector}
     * @throws RepositoryException
     */
    public final Selector selector(JcrNode<?> node) throws RepositoryException {
        return selector(node.fullname(), node.selectorName());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @param arg2
     *            see interface
     * @param arg3
     *            see interface
     * @return {@link Join}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#join(Source, Source, String, JoinCondition)
     */
    @Override
    public final synchronized Join join(Source arg0, Source arg1, String arg2, JoinCondition arg3)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.join(arg0, arg1, arg2, arg3);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @param arg2
     *            see interface
     * @param arg3
     *            see interface
     * @return {@link EquiJoinCondition}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#equiJoinCondition(String, String, String, String)
     */
    @Override
    public final synchronized EquiJoinCondition equiJoinCondition(String arg0, String arg1, String arg2, String arg3)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.equiJoinCondition(arg0, arg1, arg2, arg3);
    }

    /**
     * @param quid
     * @param quo
     * @return {@link EquiJoinCondition}
     * @throws RepositoryException
     * @see {@link #equiJoinCondition(String, String, String, String)}
     */
    public EquiJoinCondition equiJoinCondition(QualifedProperty<?, ?> quid, QualifedProperty<?, ?> quo)
        throws RepositoryException {
        return equiJoinCondition(quid.node.selectorName(), quid.property.fullname(), quo.node.selectorName(),
            quo.property.fullname());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @param arg2
     *            see interface
     * @return {@link SameNodeJoinCondition}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#sameNodeJoinCondition(String, String, String)
     */
    @Override
    public final synchronized SameNodeJoinCondition sameNodeJoinCondition(String arg0, String arg1, String arg2)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.sameNodeJoinCondition(arg0, arg1, arg2);
    }

    /**
     * @param node1
     * @param node2
     * @param node2Path
     * @return {@link SameNodeJoinCondition}
     * @throws RepositoryException
     * @see {@link #sameNodeJoinCondition(String, String, String)}
     */
    public final SameNodeJoinCondition sameNodeJoinCondition(JcrNode<?> node1, JcrNode<?> node2, String node2Path)
        throws RepositoryException {
        return sameNodeJoinCondition(node1.selectorName(), node2.selectorName(), node2Path);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link ChildNodeJoinCondition}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#childNodeJoinCondition(String, String)
     */
    @Override
    public final synchronized ChildNodeJoinCondition childNodeJoinCondition(String arg0, String arg1)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.childNodeJoinCondition(arg0, arg1);
    }

    /**
     * @param child
     * @param parent
     * @return {@link ChildNodeJoinCondition}
     * @throws RepositoryException
     * @see {@link #childNodeJoinCondition(String, String)}
     */
    public final ChildNodeJoinCondition childNodeJoinCondition(JcrNode<?> child, JcrNode<?> parent)
        throws RepositoryException {
        return childNodeJoinCondition(child.selectorName(), parent.selectorName());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link DescendantNodeJoinCondition}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#descendantNodeJoinCondition(String, String)
     */
    @Override
    public final synchronized DescendantNodeJoinCondition descendantNodeJoinCondition(String arg0, String arg1)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.descendantNodeJoinCondition(arg0, arg1);
    }

    /**
     * @param descendant
     * @param ancestor
     * @return {@link DescendantNodeJoinCondition}
     * @throws RepositoryException
     * @see {@link #descendantNodeJoinCondition(String, String)}
     */
    public final DescendantNodeJoinCondition descendantNodeJoinCondition(JcrNode<?> descendant, JcrNode<?> ancestor)
        throws RepositoryException {
        return descendantNodeJoinCondition(descendant.selectorName(), ancestor.selectorName());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link And}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#and(Constraint, Constraint)
     */
    @Override
    public final synchronized And and(Constraint arg0, Constraint arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.and(arg0, arg1);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link Or}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#or(Constraint, Constraint)
     */
    @Override
    public final synchronized Or or(Constraint arg0, Constraint arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.or(arg0, arg1);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link Not}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#not(Constraint)
     */
    @Override
    public final synchronized Not not(Constraint arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.not(arg0);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @param arg2
     *            see interface
     * @return {@link Comparison}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#comparison(DynamicOperand, String, StaticOperand)
     */
    @Override
    public final synchronized Comparison comparison(DynamicOperand arg0, String arg1, StaticOperand arg2)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.comparison(arg0, arg1, arg2);
    }

    /**
     * Convenience method to constrain a {@link DynamicOperand} to equal {@code true}.
     *
     * @param operand
     * @return {@link Constraint}
     * @throws RepositoryException
     */
    public final Constraint isTrue(DynamicOperand operand) throws RepositoryException {
        Validate.validState(delegate != null);
        return comparison(operand, JCR_OPERATOR_EQUAL_TO, literal(jcr.session.getValueFactory().createValue(true)));
    }

    /**
     * Convenience method to constrain a {@link DynamicOperand} to equal {@code false}.
     *
     * @param operand
     * @return {@link Constraint}
     * @throws RepositoryException
     */
    public final Constraint isFalse(DynamicOperand operand) throws RepositoryException {
        Validate.validState(delegate != null);
        return comparison(operand, JCR_OPERATOR_EQUAL_TO, literal(jcr.session.getValueFactory().createValue(false)));
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link PropertyExistence}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#propertyExistence(String, String)
     */
    @Override
    public final synchronized PropertyExistence propertyExistence(String arg0, String arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.propertyExistence(arg0, arg1);
    }

    /**
     * Test for property existence.
     *
     * @param qualifiedProperty
     * @return {@link PropertyExistence}
     * @throws RepositoryException
     */
    public final PropertyExistence propertyExistence(QualifedProperty<?, ?> qualifiedProperty)
        throws RepositoryException {
        return propertyExistence(qualifiedProperty.node.selectorName(), qualifiedProperty.property.fullname());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @param arg2
     *            see interface
     * @return {@link FullTextSearch}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#fullTextSearch(String, String, StaticOperand)
     */
    @Override
    public final synchronized FullTextSearch fullTextSearch(String arg0, String arg1, StaticOperand arg2)
        throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.fullTextSearch(arg0, arg1, arg2);
    }

    /**
     * @param qualifiedProperty
     * @param fullTextSearchExpression
     * @return {@link FullTextSearch}
     * @throws RepositoryException
     * @see {@link #fullTextSearch(String, String, StaticOperand)}
     */
    public final FullTextSearch fullTextSearch(QualifedProperty<?, ?> qualifiedProperty,
        StaticOperand fullTextSearchExpression) throws RepositoryException {
        return fullTextSearch(qualifiedProperty.node.selectorName(), qualifiedProperty.property.fullname(),
            fullTextSearchExpression);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link SameNode}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#sameNode(String, String)
     */
    @Override
    public final synchronized SameNode sameNode(String arg0, String arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.sameNode(arg0, arg1);
    }

    /**
     * @param node
     * @param path
     * @return {@link SameNode}
     * @throws RepositoryException
     * @see {@link #sameNode(String, String)}
     */
    public final SameNode sameNode(JcrNode<?> node, String path) throws RepositoryException {
        return sameNode(node.selectorName(), path);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link ChildNode}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#childNode(String, String)
     */
    @Override
    public final synchronized ChildNode childNode(String arg0, String arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.childNode(arg0, arg1);
    }

    /**
     * @param node
     * @param path
     * @return {@link ChildNode}
     * @throws RepositoryException
     * @see {@link #childNode(String, String)}
     */
    public final ChildNode childNode(JcrNode<?> node, String path) throws RepositoryException {
        return childNode(node.selectorName(), path);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link DescendantNode}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#descendantNode(String, String)
     */
    @Override
    public final synchronized DescendantNode descendantNode(String arg0, String arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.descendantNode(arg0, arg1);
    }

    /**
     * @param node
     * @param path
     * @return {@link DescendantNode}
     * @throws RepositoryException
     * @see {@link #descendantNode(String, String)}
     */
    public final DescendantNode descendantNode(JcrNode<?> node, String path) throws RepositoryException {
        return descendantNode(node.selectorName(), path);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @return {@link PropertyValue}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#propertyValue(String, String)
     */
    @Override
    public final synchronized PropertyValue propertyValue(String arg0, String arg1) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.propertyValue(arg0, arg1);
    }

    /**
     * @param qualifedProperty
     * @return {@link PropertyValue}
     * @throws RepositoryException
     * @see {@link #propertyValue(String, String)}
     */
    public final PropertyValue propertyValue(QualifedProperty<?, ?> qualifedProperty) throws RepositoryException {
        return propertyValue(qualifedProperty.node.selectorName(), qualifedProperty.property.fullname());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link Length}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#length(PropertyValue)
     */
    @Override
    public final synchronized Length length(PropertyValue arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.length(arg0);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link NodeName}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#nodeName(String)
     */
    @Override
    public final synchronized NodeName nodeName(String arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.nodeName(arg0);
    }

    /**
     * @param node
     * @return {@link NodeName}
     * @throws RepositoryException
     * @see {@link #nodeName(String)}
     */
    public final NodeName nodeName(JcrNode<?> node) throws RepositoryException {
        return nodeName(node.selectorName());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link NodeLocalName}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#nodeLocalName(String)
     */
    @Override
    public final synchronized NodeLocalName nodeLocalName(String arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.nodeLocalName(arg0);
    }

    /**
     * @param node
     * @return {@link NodeLocalName}
     * @throws RepositoryException
     * @see {@link #nodeLocalName(String)}
     */
    public final NodeLocalName nodeLocalName(JcrNode<?> node) throws RepositoryException {
        return nodeLocalName(node.selectorName());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link FullTextSearchScore}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#fullTextSearchScore(String)
     */
    @Override
    public final synchronized FullTextSearchScore fullTextSearchScore(String arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.fullTextSearchScore(arg0);
    }

    /**
     * @param node
     * @return {@link FullTextSearchScore}
     * @throws RepositoryException
     * @see {@link #fullTextSearchScore(String)}
     */
    public final FullTextSearchScore fullTextSearchScore(JcrNode<?> node) throws RepositoryException {
        return fullTextSearchScore(node.selectorName());
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link LowerCase}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#lowerCase(DynamicOperand)
     */
    @Override
    public final synchronized LowerCase lowerCase(DynamicOperand arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.lowerCase(arg0);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link UpperCase}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#upperCase(DynamicOperand)
     */
    @Override
    public final synchronized UpperCase upperCase(DynamicOperand arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.upperCase(arg0);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link BindVariableValue}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#bindVariable(String)
     */
    @Override
    public final synchronized BindVariableValue bindVariable(String arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.bindVariable(arg0);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link Literal}
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#literal(Value)
     */
    @Override
    public final synchronized Literal literal(Value arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.literal(arg0);
    }

    /**
     * Create a {@link Literal} using a {@link JcrFunction}.
     *
     * @param value
     * @return {@link Literal}
     * @throws RepositoryException
     */
    public final synchronized Literal literal(JcrFunction<ValueFactory, Value> value) throws RepositoryException {
        return literal(Validate.notNull(value).apply(jcr.session.getValueFactory()));
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link javax.jcr.query.qom.Ordering }
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#ascending(DynamicOperand)
     */
    @Override
    public final synchronized Ordering ascending(DynamicOperand arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.ascending(arg0);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @return {@link javax.jcr.query.qom.Ordering }
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#descending(DynamicOperand)
     */
    @Override
    public final synchronized Ordering descending(DynamicOperand arg0) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.descending(arg0);
    }

    /**
     * {@inheritDoc}
     *
     * @param arg0
     *            see interface
     * @param arg1
     *            see interface
     * @param arg2
     *            see interface
     * @return {@link javax.jcr.query.qom.Column }
     * @throws InvalidQueryException
     *             see interface
     * @throws RepositoryException
     *             see interface
     * @see QueryObjectModelFactory#column(String, String, String)
     */
    @Override
    public final synchronized Column column(String arg0, String arg1, String arg2) throws RepositoryException {
        Validate.validState(delegate != null);
        return delegate.column(arg0, arg1, arg2);
    }

    /**
     * @param qualifedProperty
     * @param column
     * @return {@link javax.jcr.query.qom.Column }
     * @throws RepositoryException
     * @see {@link #column(String, String, String)}
     */
    public final Column column(QualifedProperty<?, ?> qualifedProperty, String column) throws RepositoryException {
        return column(qualifedProperty.node.selectorName(), qualifedProperty.property.fullname(), column);
    }

    /**
     * Get the raw delegate currently in use.
     * @param <D> inferred/expected type
     */
    @SuppressWarnings("unchecked")
    protected <D extends QueryObjectModelFactory> D rawDelegate() {
        return (D) delegate;
    }
}
